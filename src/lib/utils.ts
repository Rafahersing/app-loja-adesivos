// src/lib/utils.ts

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import { createClient } from '@supabase/supabase-js';
import { Product } from "@/types/product";

export function cn(...inputs: ClassValue[]) {
Â  Â  return twMerge(clsx(inputs));
}

// Supondo que as variÃ¡veis de ambiente VITE_PUBLIC_SUPABASE_URL e VITE_PUBLIC_SUPABASE_ANON_KEY 
// estÃ£o definidas e acessÃ­veis, conforme a imagem de variÃ¡veis de ambiente.
const supabaseUrl = import.meta.env.VITE_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl as string, supabaseAnonKey as string);

// ----------------------------------------------------------------------
// FunÃ§Ãµes de Busca de Dados (Shop)
// ----------------------------------------------------------------------

export async function fetchCategories() {
Â  Â  const { data, error } = await supabase
Â  Â  Â  Â  .from('categorias')
Â  Â  Â  Â  .select('id, nome')
Â  Â  Â  Â  .order('nome', { ascending: true });Â 

Â  Â  if (error) {
Â  Â  Â  Â  throw new Error(`Erro ao buscar categorias: ${error.message}`);
Â  Â  }
Â  Â Â 
Â  Â  return data.map(cat => ({
Â  Â  Â  Â  ...cat,
Â  Â  Â  Â  id: String(cat.id),Â 
Â  Â  }));Â 
}

/**
 * Busca todos os produtos com as informaÃ§Ãµes da categoria.
 */
export async function fetchProducts() {
Â  Â  const { data, error } = await supabase
Â  Â  Â  Â  .from('produtos')
Â  Â  Â  Â  .select(`
Â  Â  Â  Â  Â  Â  id,Â 
Â  Â  Â  Â  Â  Â  titulo,Â 
Â  Â  Â  Â  Â  Â  preco,Â 
Â  Â  Â  Â  Â  Â  url_imagem,Â 
Â  Â  Â  Â  Â  Â  descricao,
Â  Â  Â  Â  Â  Â  created_at,
Â  Â  Â  Â  Â  Â  produtos_categorias!inner(
                categoria_id,
                categorias(nome) 
            )Â 
Â  Â  Â  Â  `) // Query SQL limpa - Resolve o "Failed to parse select parameter"
Â  Â  Â  Â  .order('titulo', { ascending: false });

Â  Â  if (error) {
Â  Â  Â  Â  console.error("Erro ao buscar produtos:", error);
Â  Â  Â  Â  throw new Error(`Erro CrÃ­tico ao carregar Dados: ${error.message}`);
Â  Â  }

Â  Â  // Mapeamento que ALINHA DB com Interface e CONVERTE IDS para STRING
Â  Â  const productsData = (data || []).map((product: any) => {
Â  Â  Â  Â  const rawPrice = product.preco ? String(product.preco) : '0';
        
        // Extrai dados da categoria
        // O produto favorito estÃ¡ ligado Ã  categoria ID 26, cujo nome Ã© "Semana | Domingo".
        const categoryData = product.produtos_categorias[0];
        const categoryId = categoryData?.categoria_id;
        // O valor do nome deve ser 'Semana | Domingo' e nÃ£o 'Geral'.
        const categoryName = categoryData?.categorias?.nome || ''; 

Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  id: String(product.id),Â 
Â  Â  Â  Â  Â  Â  title: product.titulo || 'Produto Sem TÃ­tulo',
Â  Â  Â  Â  Â  Â  description: product.descricao || '',
Â  Â  Â  Â  Â  Â  price: parseFloat(rawPrice) || 0,Â 
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  imageUrl: product.url_imagem || '',Â 
Â  Â  Â  Â  Â  Â  imageUrlHighRes: product.url_imagem || '',
Â  Â  Â  Â  Â  Â  createdAt: product.created_at,
Â  Â  Â  Â  Â  Â  category_id: categoryId ? String(categoryId) : null,Â 
Â  Â  Â  Â  Â  Â  category: categoryName,Â // Este deve ser o nome correto!
Â  Â  Â  Â  };
Â  Â  });

    // ðŸ›‘ LOG DE DIAGNÃ“STICO: Mostra o objeto que o front-end estÃ¡ recebendo
    console.log("Produtos Mapeados (Verificar Categoria):", productsData);

Â  Â  return productsData as Product[];
}


export const slugify = (text: string): string => {
Â  Â  return text
Â  Â  Â  Â  .toString()
Â  Â  Â  Â  .toLowerCase()
Â  Â  Â  Â  .normalize('NFD')
Â  Â  Â  Â  .replace(/[Ì€-Í¯]/g, '')
Â  Â  Â  Â  .trim()
Â  Â  Â  Â  .replace(/\s+/g, '-')
Â  Â  Â  Â  .replace(/[^\w\-]+/g, '')
Â  Â  Â  Â  .replace(/\-\-+/g, '-');
};

/**
 * Busca um Ãºnico produto pelo seu ID (string) no Supabase.
 */
export async function fetchProductById(id: string): Promise<Product | null> {
Â  Â Â 
Â  Â  const dbProductId = Number(id);

Â  Â  const { data, error } = await supabase
Â  Â  Â  Â  .from('produtos')
Â  Â  Â  Â  .select(`
Â  Â  Â  Â  Â  Â  id,Â 
Â  Â  Â  Â  Â  Â  titulo,Â 
Â  Â  Â  Â  Â  Â  preco,Â 
Â  Â  Â  Â  Â  Â  url_imagem,Â 
Â  Â  Â  Â  Â  Â  descricao,
Â  Â  Â  Â  Â  Â  created_at,
Â  Â  Â  Â  Â  Â  produtos_categorias!inner(
                categoria_id,
                categorias(nome)
            )Â 
Â  Â  Â  Â  `) // Query SQL limpa
Â  Â  Â  Â  .eq('id', dbProductId)
Â  Â  Â  Â  .single();Â 

Â  Â  if (error && error.code !== 'PGRST116') {
Â  Â  Â  Â  console.error("Erro ao buscar produto por ID:", error);
Â  Â  Â  Â  return null;
Â  Â  }

Â  Â  if (!data) {
Â  Â  Â  Â  return null;
Â  Â  }

Â  Â  // Mapeamento do DB para a interface Product
Â  Â  const product: any = data;
Â  Â  const rawPrice = product.preco ? String(product.preco) : '0';
    
    // Extrai dados da categoria
    const categoryData = product.produtos_categorias[0];
    const categoryId = categoryData?.categoria_id;
    const categoryName = categoryData?.categorias?.nome || '';

Â  Â  return {
Â  Â  Â  Â  id: String(product.id),
Â  Â  Â  Â  title: product.titulo || 'Produto Sem TÃ­tulo',
Â  Â  Â  Â  description: product.descricao || '',
Â  Â  Â  Â  price: parseFloat(rawPrice) || 0,Â 
Â  Â  Â  Â  imageUrl: product.url_imagem || '',Â 
Â  Â  Â  Â  imageUrlHighRes: product.url_imagem || '',
Â  Â  Â  Â  createdAt: product.created_at,
Â  Â  Â  Â  category_id: categoryId ? String(categoryId) : null,Â 
Â  Â  Â  Â  category: categoryName,Â 
Â  Â  } as Product;
}
